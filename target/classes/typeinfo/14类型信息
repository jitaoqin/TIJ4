	运行时类型识别(RTTI, Run-Time Type Identification)是Java中非常有用的机制，在Java运行时，RTTI维护类的相关信息。
多态(polymorphism)是基于RTTI实现的。RTTI的功能主要是由Class类实现的。
	RTTI，编译器在编译时打开和检查.class文件
	反射，运行时打开和检查.class文件
	java提供了另外一种方法来生成对Class对象的引用，即字面常量。就像下面这样FancyToy.class;这样做不仅简单而且安全，因为它在
编译时就会接受检查（因此不需要置于try语句块中）根除了对forName()调用，更高效。类字面常量不仅可以应用于普通的类，也可以应用于接口，
数组，以及基本数据类型。另外，对于基本数据类型的包装器类，还有一个标准字段TYPE。TYPE字段是一个引用，只想对应的基本数据类型的Class对象，例如boolean.class等价于Boolean.TYPE.
	使用.class创建class对象分为3个步骤：
	1）加载 类加载器执行，将查找字节码，并从这些字节码创建一个Class对象
	2）链接 在链接阶段将验证类中的字节码，为静态域分配存储空间，如果必需的话，将解析这个列创建的对其他类的引用。
	3）初始化 对其父类初始化，执行静态初始化器和静态初始化块。
	Class引用总是指向某个Class对象，它可以制兆类的实例，并包含可作用于实例的所有方法代码和静态成员。