1）构造器采用与类相同的名称。初始化时自动调用构造器。
2）如果传入的数据类型（实际参数类型）小于方法中声明的形参类型，实参类型就会被提升。 char型略有不同，如果无法找到恰好接受参数的方法，就会直接提升至int型。
 		如果方法实参的基本类型大于形参，就通过强制类型转换。
3)this:只能在方法内部使用，表示调用方法的对象。注意：如果在方法内部调用同一个类的另一个方法，就不必使用this，直接调用即可。当前方法的this会
		自动引用同一类中的其他方法。
4)垃圾回收工作原理：只释放new分配的内存。其他对象：一旦垃圾回收器准备释放对象占用的存储空间，首先调用类的finalize()方法，并且在下一次垃圾
		回收动作发生时，才会真正回收对象占用的内存。
		注意：对象可能不被垃圾回收
			垃圾回收并不等于“析构”
			finalize()真正用途：垃圾回收至于内存有关
			
			

(1)访问SubClass.main(),(这是一个static方法)，于是装载器就会为你寻找已经编译的SubClass类的代码（也就是SubClass.class文件）。在装载的过程中，
	装载器注意到它有一个基类（也就是extends所要表示的意思），于是它再装载基类。不管你创不创建基类对象，这个过程总会发生。如果基类还有
	基类，那么第二个基类也会被装载，依此类推。
(2)执行根基类的static初始化，然后是下一个派生类的static初始化，依此类推。这个顺序非常重要，因为派生类的“static初始化”有可能要依赖基类成员的正确初始化。
(3)当所有必要的类都已经装载结束，开始执行main()方法体，并用new SubClass（）创建对象。
(4)类SubClass存在父类，则调用父类的构造函数，你可以使用super来指定调用哪个构造函数。基类的构造过程以及构造顺序，同派生类的相同。首先基类中各个变量按照字面顺序进行初始化，然后执行基类的构造函数的其余部分。
(5)对子类成员数据按照它们声明的顺序初始化，执行子类构造函数的其余部分。

对象初始化顺序，如果有对应成员/父类的才执行对应条目：
1.将分配给对象的存储空间初始化为二进制的零；
2.调用基类构造器，从最顶层/根的基类开始；
3.按照声明的顺序，使用直接的赋值或者初始化方法，先依次初始化static变量，再依次初始化非static变量；
4.调用本对象所属类的构造器。 

1.在一个类的对象实例化时，成员变量首先初始化，然后才调用构造器，无论书写顺序。如果调用构造器前，没有显式初始化，那么会赋默认值。
这样做法的原因可以理解为：构造器执行时可能会用到一些成员变量的初值。
2.static变量早于所有其他的类成员变量初始化，同样无论书写顺序。但是static变量仅在所在类第一次被使用时初始化一次。
3.基类构造器总是在导出类的构造过程中被调用，而且按照继承层级逐渐向上链接（调用顺序则是从基类开始向下）。可以理解为，这么做的逻辑关系是在一个类构建时可能会用到其父类的成员、方法。在清理时顺序相反。
4.成员的初始化方法（包括基本数据类型的赋值）在基类构造器调用之后才会被调用。最初时，分配给对象的存储空间初始化二进制的零。


属性、方法、构造方法和自由块都是类中的成员，在创建类的对象时，类中各成员的执行顺序：
1.父类静态成员和静态初始化快，按在代码中出现的顺序依次执行。
2.子类静态成员和静态初始化块，按在代码中出现的顺序依次执行。
3. 父类的实例成员和实例初始化块，按在代码中出现的顺序依次执行。
4.执行父类的构造方法。
5.子类实例成员和实例初始化块，按在代码中出现的顺序依次执行。
6.执行子类的构造方法。


1.首先初始化静态域是因为静态域是放在方法区和class对象在一起的。
2.由于类加载的时候，会向上查找基类，因为子类的初始化依赖于基类首先初始化。所以会首先发生“基类->子类"顺序的类加载，类加载过程中，顺便完成了静态域的初始化。
3.另外一条规则是初始化块和域的初始化按照声明的顺序进行。



源码编译：代码编译由JAVA源码编译器来完成。主要是将源码编译成字节码文件（class文件）。字节码文件格式主要分为两部分：常量池和方法字节码。

3、初始化阶段
初始化是类加载机制的最后一步，在前面准备阶段，类变量已经赋过一次系统要求的初始值，在初始化阶段最重要的事情就是对类变量进行初始化，关注的重点是父子类之间各类资源初始化的顺序。
java类中对类变量指定初始值有两种方式：1、声明类变量时指定初始值；2、使用静态初始化块为类变量指定初始值。
初始化的时机
1）创建类实例的时候，分别有：1、使用new关键字创建实例；2、通过反射创建实例；3、通过反序列化方式创建实例。new Test();	Class.forName(“com.mengdd.Test”);
2）调用某个类的类方法（静态方法）Test.doSomething();
3）访问某个类或接口的类变量，或为该类变量赋值。	int b=Test.a;		Test.a=b;
4）初始化某个类的子类。当初始化子类的时候，该子类的所有父类都会被初始化。
5）直接使用java.exe命令来运行某个主类。


初始化的步骤
1、如果该类还没有加载和连接，则程序先加载该类并连接。
2、如果该类的直接父类没有加载，则先初始化其直接父类。
3、如果类中有初始化语句，则系统依次执行这些初始化语句。
在第二个步骤中，如果直接父类又有直接父类，则系统会再次重复这三个步骤来初始化这个父类，依次类推，JVM最先初始化的总是java.lang.Object类。当程序主动使用任何一个类时，系统会保证该类以及所有的父类都会被初始化。

一、Java类加载机制

1．概述

      		类的加载：类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在堆区创建一个java.lang.Class对象，用来封装类在方法区内的数据结构。类的加载的最终产品是位于堆区中的Class对象，

	Class对象封装了类在方法区内的数据结构，并且向Java程序员提供了访问方法区内的数据结构的接口。
	
		类加载器并不需要等到某个类被“首次主动使用”时再加载它，JVM规范允许类加载器在预料某个类将要被使用时就预先加载它，如果在预先加载的过程中遇到了.class文件缺失或存在错误，类加载器必须在程序首次主动使用该类时才报告错误

	（LinkageError错误）如果这个类一直没有被程序主动使用，那么类加载器就不会报告错误。

	加载.class文件的方式
	– 从本地系统中直接加载
	– 通过网络下载.class文件
	– 从zip，jar等归档文件中加载.class文件
	– 从专有数据库中提取.class文件
	– 将Java源文件动态编译为.class文件

2．工作机制

    	    类的生命周期:从被加载到虚拟机内存中开始，到卸载出内存结束。过程共有七个阶段，加载----验证----准备----解析-----初始化----使用-----卸载。其中类加载的过程包括了加载、验证、准备、解析、初始化五个阶段。在这五个阶段中，加载、验证、

	准备和初始化这四个阶段发生的顺序是确定的，而解析阶段则不一定，它在某些情况下可以在初始化阶段之后开始，这是为了支持Java语言的运行时绑定（也成为动态绑定或晚期绑定）。另外注意这里的几个阶段是按顺序开始，而不是按顺序进行或完成，因为
	这些阶段通常都是互相交叉地混合进行的，通常在一个阶段执行的过程中调用或激活另一个阶段。	要经过以下步骤：

     (1) 加载：查找并加载类的二进制数据

     (2) 连接：把类的二进制数据合并到JRE中；

        (a)验证：确保被加载类的正确性；

        (b)准备：为类的静态变量分配内存，并将其初始化为默认值；

        (c)解析：把类中的符号引用转换为直接引用；

     (3) 初始化：对类的静态变量，静态代码块执行初始化操作

      Java程序可以动态扩展是由运行期动态加载和动态链接实现的；比如：如果编写一个使用接口的应用程序，可以等到运行时再指定其实际的实现(多态)，解析过程有时候还可以在初始化之后执行；比如：动态绑定(多态)；        


       【加载】

    	在加载阶段，虚拟机需要完成以下3件事情

        (1) 通过一个类的全限定名来获取定义此类的二进制字节流

        (2) 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构

        (3) 在Java堆中生成一个代表这个类的java.lang.Class对象，作为方法区这些数据的访问入口。

    		相对于类加载的其他阶段而言，加载阶段（准确地说，是加载阶段获取类的二进制字节流的动作）是可控性最强的阶段，因为开发人员既可以使用系统提供的类加载器来完成加载，也可以自定义自己的类加载器来完成加载。

    	加载阶段完成后，虚拟机外部的 二进制字节流就按照虚拟机所需的格式存储在方法区之中，而且在Java堆中也创建一个java.lang.Class类的对象，这样便可以通过该对象访问方法区中的这些数据。

        

         【验证】

		验证是连接阶段的第一步，这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。验证阶段大致会完成4个阶段的检验动作：

   	文件格式验证：验证字节流是否符合Class文件格式的规范；例如：是否以0xCAFEBABE开头、主次版本号是否在当前虚拟机的处理范围之内、常量池中的常量是否有不被支持的类型。

	元数据验证：对字节码描述的信息进行语义分析（注意：对比javac编译阶段的语义分析），以保证其描述的信息符合Java语言规范的要求；例如：这个类是否有父类，除了java.lang.Object之外。

   	字节码验证：通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。

   	符号引用验证：确保解析动作能正确执行。

  	验证阶段是非常重要的，但不是必须的，它对程序运行期没有影响，如果所引用的类经过反复验证，那么可以考虑采用-Xverifynone参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。
 

         【准备】
   
  	对于该阶段有以下几点需要注意：

    	1、这时候进行内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中。

    	2、这里所设置的初始值通常情况下是数据类型默认的零值（如0、0L、null、false等），而不是被在Java代码中被显式地赋予的值。假设一个类变量的定义为：public static int value = 3； 那么变量value在准备阶段过后的初始值为0，而不是3，因为这时
	候尚未开始执行任何Java方法，而把value赋值为3的putstatic指令是在程序编译后，存放于类构造器<clinit>（）方法之中的，所以把value赋值为3的动作将在初始化阶段才会执行。

 	这里还需要注意如下几点：

 	对基本数据类型来说，对于类变量（static）和全局变量，如果不显式地对其赋值而直接使用，则系统会为其赋予默认的零值，而对于局部变量来说，在使用前必须显式地为其赋值，否则编译时不通过。

 	对于同时被static和final修饰的常量，必须在声明的时候就为其显式地赋值，否则编译时不通过；

	而只被final修饰的常量则既可以在声明时显式地为其赋值，也可以在类初始化时显式地为其赋值，总之，在使用前必须为其显式地赋值，系统不会为其赋予默认零值。

 	对于引用数据类型reference来说，如数组引用、对象引用等，如果没有对其进行显式地赋值而直接使用，系统都会为其赋予默认的零值，即null。

	如果在数组初始化时没有对数组中的各元素赋值，那么其中的元素将根据对应的数据类型而被赋予默认的零值。

    	3、如果类字段的字段属性表中存在ConstantValue属性，即同时被final和static修饰，那么在准备阶段变量value就会被初始化为ConstValue属性所指定的值。假设上面的类变量value被定义为： public static final int value = 3

	编译时Java将会为value生成ConstantValue属性，在准备阶段虚拟机就会根据ConstantValue的设置将value赋值为3。我们可以理解为static final常量在编译期就将其结果放入了调用它的类的常量池中。
 

 	【解析】

		解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程，解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符7类符号引用进行。符号引用就是一组符号来描述目标，可以是任何字面量。

	直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。


      【类初始化】 

      初始化，为类的静态变量赋予正确的初始值，JVM负责对类进行初始化，主要对类变量进行初始化。在Java中对类变量进行初始值设定有两种方式：

  	①声明类变量是指定初始值  ②使用静态代码块为类变量指定初始值

 	JVM初始化步骤

 	1、假如这个类还没有被加载和连接，则程序先加载并连接该类

 	2、假如该类的直接父类还没有被初始化，则先初始化其直接父类
	
 	3、假如类中有初始化语句，则系统依次执行这些初始化语句

	类初始化时机：只有当对类的主动使用的时候才会导致类的初始化，类的主动使用包括以下六种：

	– 创建类的实例，也就是new的方式
	
	– 访问某个类或接口的静态变量，或者对该静态变量赋值

	– 调用类的静态方法

	– 反射（如Class.forName(“com.shengsiyuan.Test”)）

	– 初始化某个类的子类，则其父类也会被初始化

	– Java虚拟机启动时被标明为启动类的类（Java Test），直接使用java.exe命令来运行某个主类

	除了上面几种方式会自动初始化一个类，其他访问类的方式都称不会触发类的初始化，称为被动引用。

	1、子类引用父类的静态变量，不会导致子类初始化。

	2、通过数组定义引用类，不会触发此类的初始化

	3、引用常量时，不会触发该类的初始化。用final修饰某个类变量时，它的值在编译时就已经确定好放入常量池了，所以在访问该类变量时，等于直接从常量池中获取，并没有初始化该类。


	【结束生命周期】

	在如下几种情况下，Java虚拟机将结束生命周期

	– 执行了System.exit()方法

	– 程序正常执行结束
	
	– 程序在执行过程中遇到了异常或错误而异常终止

	– 由于操作系统出现错误而导致Java虚拟机进程终止

二、类加载器与双亲委派模型

      类加载器

     (1) Bootstrap ClassLoader : 将存放于<JAVA_HOME>\lib目录中的，或者被-Xbootclasspath参数所指定的路径中的，并且是虚拟机识别的（仅按照文件名识别，如 rt.jar 名字不符合的类库即使放在lib目录中也不会被加载）类库加载到虚拟机内存中。启动类加
		载器无法被Java程序直接引用

     (2) Extension ClassLoader : 将<JAVA_HOME>\lib\ext目录下的，或者被java.ext.dirs系统变量所指定的路径中的所有类库加载。开发者可以直接使用扩展类加载器。

     (3) Application ClassLoader : 负责加载用户类路径(ClassPath)上所指定的类库,开发者可直接使用。  

	双亲委派模型

	工作过程：如果一个类加载器接收到了类加载的请求，它首先把这个请求委托给他的父类加载器去完成，每个层次的类加载器都是如此，因此所有的加载请求都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它在搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载。

     好处：java类随着它的类加载器一起具备了一种带有优先级的层次关系。例如类java.lang.Object，它存放在rt.jar中，无论哪个类加载器要加载这个类，最终都会委派给启动类加载器进行加载，因此Object类在程序的各种类加载器环境中都是同一个类。相反，如果用户自己写了一个名为java.lang.Object的类，并放在程序的Classpath中，那系统中将会出现多个不同的Object类，java类型体系中最基础的行为也无法保证，应用程序也会变得一片混乱。

 

       java.lang.ClassLoader中几个最重要的方法:
	//加载指定名称（包括包名）的二进制类型，供用户调用的接口
	public Class<?> loadClass(String name);
	//加载指定名称（包括包名）的二进制类型，同时指定是否解析（但是，这里的resolve参数不一定真正能达到解析的效果），供继承用
	protected synchronized Class<?> loadClass(String name, boolean resolve);
	protected Class<?> findClass(String name)
	//定义类型，一般在findClass方法中读取到对应字节码后调用，可以看出不可继承（说明：JVM已经实现了对应的具体功能，解析对应的字节码，产生对应的内部数据结构放置到方法区，所以无需覆写，直接调用就可以了）
	protected final Class<?> defineClass(String name, byte[] b, int off, int len) throws ClassFormatError{}


三、反射
      		Reflection机制允许程序在正在执行的过程中，利用Reflection APIs取得任何已知名称的类的内部信息，包括：package、 type parameters、 superclass、 implemented interfaces、 inner classes、 outer classes、 fields、

    	constructors、 methods、 modifiers等，并可以在执行的过程中，动态生成instances、变更fields内容或唤起methods。

      1)、获取构造方法

	  Constructor getConstructor(Class[] params)     		根据构造函数的参数，返回一个具体的具有public属性的构造函数
	
　　　　Constructor getConstructors()     			返回所有具有public属性的构造函数数组

　　　　Constructor getDeclaredConstructor(Class[] params) 	根据构造函数的参数，返回一个具体的构造函数（不分public和非public属性）

　　　　Constructor getDeclaredConstructors()    		返回该类中所有的构造函数数组（不分public和非public属性）

	2)、获取类的成员方法

	Method getMethod(String name, Class[] params)    	根据方法名和参数，返回一个具体的具有public属性的方法

　　　　Method[] getMethods()    				返回所有具有public属性的方法数组

　　　　Method getDeclaredMethod(String name, Class[] params)   根据方法名和参数，返回一个具体的方法（不分public和非public属性）

　　　　Method[] getDeclaredMethods()    			返回该类中的所有的方法数组（不分public和非public属性）

	3)、获取类的成员变量（成员属性）

　　　　Field getField(String name)    				根据变量名，返回一个具体的具有public属性的成员变量

　　　　Field[] getFields()  					返回具有public属性的成员变量的数组

　　　　Field getDeclaredField(String name)  			根据变量名，返回一个成员变量（不分public和非public属性）

　　　　Field[] getDelcaredFields()    				返回所有成员变量组成的数组（不分public和非public属性）

3、类加载器

寻找类加载器，先来一个小例子

复制代码
package com.neo.classloader;
public class ClassLoaderTest {
     public static void main(String[] args) {
        ClassLoader loader = Thread.currentThread().getContextClassLoader();
        System.out.println(loader);
        System.out.println(loader.getParent());
        System.out.println(loader.getParent().getParent());
    }
}
复制代码
运行后，输出结果：

sun.misc.Launcher$AppClassLoader@64fef26a
sun.misc.Launcher$ExtClassLoader@1ddd40f3
null
从上面的结果可以看出，并没有获取到ExtClassLoader的父Loader，原因是Bootstrap Loader（引导类加载器）是用C语言实现的，找不到一个确定的返回父Loader的方式，于是就返回null。

这几种类加载器的层次关系如下图所示：

注意：这里父类加载器并不是通过继承关系来实现的，而是采用组合实现的。

站在Java虚拟机的角度来讲，只存在两种不同的类加载器：启动类加载器：它使用C++实现（这里仅限于Hotspot，也就是JDK1.5之后默认的虚拟机，有很多其他的虚拟机是用Java语言实现的），是虚拟机自身的一部分；所有其他的类加载器：这些类加载器都由Java语言实现，独立于虚拟机之外，并且全部继承自抽象类java.lang.ClassLoader，这些类加载器需要由启动类加载器加载到内存中之后才能去加载其他的类。

站在Java开发人员的角度来看，类加载器可以大致划分为以下三类：
启动类加载器：Bootstrap ClassLoader，负责加载存放在JDK\jre\lib(JDK代表JDK的安装目录，下同)下，或被-Xbootclasspath参数指定的路径中的，并且能被虚拟机识别的类库（如rt.jar，所有的java.*开头的类均被Bootstrap ClassLoader加载）。启动类加载器是无法被Java程序直接引用的。

扩展类加载器：Extension ClassLoader，该加载器由sun.misc.Launcher$ExtClassLoader实现，它负责加载DK\jre\lib\ext目录中，或者由java.ext.dirs系统变量指定的路径中的所有类库（如javax.*开头的类），开发者可以直接使用扩展类加载器。

应用程序类加载器：Application ClassLoader，该类加载器由sun.misc.Launcher$AppClassLoader来实现，它负责加载用户类路径（ClassPath）所指定的类，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。

应用程序都是由这三种类加载器互相配合进行加载的，如果有必要，我们还可以加入自定义的类加载器。因为JVM自带的ClassLoader只是懂得从本地文件系统加载标准的java class文件，因此如果编写了自己的ClassLoader，便可以做到如下几点：

1）在执行非置信代码之前，自动验证数字签名。

2）动态地创建符合用户特定需要的定制化构建类。

3）从特定的场所取得java class，例如数据库中和网络中。

 

JVM类加载机制

?全盘负责，当一个类加载器负责加载某个Class时，该Class所依赖的和引用的其他Class也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入

?父类委托，先让父类加载器试图加载该类，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类

?缓存机制，缓存机制将会保证所有加载过的Class都会被缓存，当程序中需要使用某个Class时，类加载器先从缓存区寻找该Class，只有缓存区不存在，系统才会读取该类对应的二进制数据，并将其转换成Class对象，存入缓存区。这就是为什么修改了Class后，必须重启JVM，程序的修改才会生效

 

4、类的加载

类加载有三种方式：
1、命令行启动应用时候由JVM初始化加载
2、通过Class.forName()方法动态加载
3、通过ClassLoader.loadClass()方法动态加载


package com.neo.classloader;
public class loaderTest { 
        public static void main(String[] args) throws ClassNotFoundException { 
                ClassLoader loader = HelloWorld.class.getClassLoader(); 
                System.out.println(loader); 
                //使用ClassLoader.loadClass()来加载类，不会执行初始化块 
                loader.loadClass("Test2"); 
                //使用Class.forName()来加载类，默认会执行初始化块 
//                Class.forName("Test2"); 
                //使用Class.forName()来加载类，并指定ClassLoader，初始化时不执行静态块 
//                Class.forName("Test2", false, loader); 
        } 
}


public class Test2 { 
        static { 
                System.out.println("静态初始化块执行了！"); 
        } 
}

分别切换加载方式，会有不同的输出结果。

 

Class.forName()和ClassLoader.loadClass()区别

Class.forName()：将类的.class文件加载到jvm中之外，还会对类进行解释，执行类中的static块；

ClassLoader.loadClass()：只干一件事情，就是将.class文件加载到jvm中，不会执行static中的内容,只有在newInstance才会去执行static块。

注：

Class.forName(name, initialize, loader)带参函数也可控制是否加载static块。并且只有调用了newInstance()方法采用调用构造函数，创建类的对象 。

 

5、双亲委派模型

双亲委派模型的工作流程是：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把请求委托给父加载器去完成，依次向上，因此，所有的类加载请求最终都应该被传递到顶层的启动类加载器中，只有当父加载器在它的搜索范围中没有找到所需的类时，即无法完成该加载，子加载器才会尝试自己去加载该类。

双亲委派机制:
1、当AppClassLoader加载一个class时，它首先不会自己去尝试加载这个类，而是把类加载请求委派给父类加载器ExtClassLoader去完成。

2、当ExtClassLoader加载一个class时，它首先也不会自己去尝试加载这个类，而是把类加载请求委派给BootStrapClassLoader去完成。

3、如果BootStrapClassLoader加载失败（例如在$JAVA_HOME/jre/lib里未查找到该class），会使用ExtClassLoader来尝试加载；

4、若ExtClassLoader也加载失败，则会使用AppClassLoader来加载，如果AppClassLoader也加载失败，则会报出异常ClassNotFoundException。

 

ClassLoader源码分析：

复制代码
public Class<?> loadClass(String name)throws ClassNotFoundException {
            return loadClass(name, false);
    }
    
    protected synchronized Class<?> loadClass(String name, boolean resolve)throws ClassNotFoundException {
            // 首先判断该类型是否已经被加载
            Class c = findLoadedClass(name);
            if (c == null) {
                //如果没有被加载，就委托给父类加载或者委派给启动类加载器加载
                try {
                    if (parent != null) {
                         //如果存在父类加载器，就委派给父类加载器加载
                        c = parent.loadClass(name, false);
                    } else {
                    //如果不存在父类加载器，就检查是否是由启动类加载器加载的类，通过调用本地方法native Class findBootstrapClass(String name)
                        c = findBootstrapClass0(name);
                    }
                } catch (ClassNotFoundException e) {
                 // 如果父类加载器和启动类加载器都不能完成加载任务，才调用自身的加载功能
                    c = findClass(name);
                }
            }
            if (resolve) {
                resolveClass(c);
            }
            return c;
        }
复制代码
双亲委派模型意义：

-系统类防止内存中出现多份同样的字节码

-保证Java程序安全稳定运行

 

6、自定义类加载器

    通常情况下，我们都是直接使用系统类加载器。但是，有的时候，我们也需要自定义类加载器。比如应用是通过网络来传输 Java 类的字节码，为保证安全性，这些字节码经过了加密处理，这时系统类加载器就无法对其进行加载，这样则需要自定义类加载器来实现。自定义类加载器一般都是继承自 ClassLoader 类，从上面对 loadClass 方法来分析来看，我们只需要重写 findClass 方法即可。下面我们通过一个示例来演示自定义类加载器的流程：

复制代码
package com.neo.classloader;

import java.io.*;


public class MyClassLoader extends ClassLoader {

    private String root;

    protected Class<?> findClass(String name) throws ClassNotFoundException {
        byte[] classData = loadClassData(name);
        if (classData == null) {
            throw new ClassNotFoundException();
        } else {
            return defineClass(name, classData, 0, classData.length);
        }
    }

    private byte[] loadClassData(String className) {
        String fileName = root + File.separatorChar
                + className.replace('.', File.separatorChar) + ".class";
        try {
            InputStream ins = new FileInputStream(fileName);
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            int bufferSize = 1024;
            byte[] buffer = new byte[bufferSize];
            int length = 0;
            while ((length = ins.read(buffer)) != -1) {
                baos.write(buffer, 0, length);
            }
            return baos.toByteArray();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    public String getRoot() {
        return root;
    }

    public void setRoot(String root) {
        this.root = root;
    }

    public static void main(String[] args)  {

        MyClassLoader classLoader = new MyClassLoader();
        classLoader.setRoot("E:\\temp");

        Class<?> testClass = null;
        try {
            testClass = classLoader.loadClass("com.neo.classloader.Test2");
            Object object = testClass.newInstance();
            System.out.println(object.getClass().getClassLoader());
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }
    }
}

自定义类加载器的核心在于对字节码文件的获取，如果是加密的字节码则需要在该类中对文件进行解密。由于这里只是演示，我并未对class文件进行加密，因此没有解密的过程。这里有几点需要注意：

1、这里传递的文件名需要是类的全限定性名称，即com.paddx.test.classloading.Test格式的，因为 defineClass 方法是按这种格式进行处理的。

2、最好不要重写loadClass方法，因为这样容易破坏双亲委托模式。

3、这类Test 类本身可以被 AppClassLoader 类加载，因此我们不能把 com/paddx/test/classloading/Test.class 放在类路径下。否则，由于双亲委托机制的存在，会直接导致该类由 AppClassLoader 加载，而不会通过我们自定义类加载器来加载。



